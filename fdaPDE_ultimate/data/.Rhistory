nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam="binomial", mesh.const=T, scale.param=NULL)
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam="binomial", mesh.const=T, scale.param=NULL)
output_CPP$beta_hat
.rs.restartR()
rm(list=ls())
graphics.off()
# LOAD library ----------------------------------------
library(fdaPDE)
output_CPP<- fdaPDE::gam.fem.fit(1, "binomial", 1)
10^(-2:5)
print("asd \n asd")
s = "asd""
.rs.restartR()
library(fdaPDE)
#.rs.restartR()
rm(list=ls())
.rs.restartR()
library(fdaPDE)
gam.fem.fit()
help(gam.fem.fit)
help(gam.fem.fit())
help(smooth.GAM.FEM)
help(smooth.GAM.FEM())
help("smooth.GAM.FEM")
help("gam.fem.fit")
smooth.GAM.FEM()
.rs.restartR()
#.rs.restartR()
rm(list=ls())
library(fdaPDE)
.rs.restartR()
#.rs.restartR()
rm(list=ls())
#.rs.restartR()
rm(list=ls())
library(fdaPDE)
#.rs.restartR()
rm(list=ls())
graphics.off()
# PATH ------------------------------------------------
# gam_fem_path = "/home/alb/Scrivania/PACS/Codes_GAM_FEM/"
gam_fem_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/GAM_tests"
# gamfemfitfolder = "/home/alb/Scrivania/PACS/Git_Folder/"
gamfemfitfolder = "/Users/giuliopn/PACSworkspace4/"
# gamfemfitfolder = (DOVE VOGLIAMO SALVARE GLI AUTPUT DEI PRINT IN GAMFEMFIT)
mesh_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/fdaPDE_ultimate/data"
setwd(gam_fem_path)
library(fdaPDE)
FAMILY = "gaussian" # "cloglog", "probit", "poisson", "gamma", "exponential" , ( "gaussian", "inv_gaussian" )
{
if(FAMILY == "binomial"){
logit <- function(x){qlogis(x)}
inv.logit <- function(x){plogis(x)}
link = logit
inv.link = inv.logit
}
if(FAMILY == "cloglog"){
l<-make.link("cloglog")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "probit"){
l<-make.link("probit")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "poisson"){
l<-make.link("log")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "exponential"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gamma"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gaussian"){
link<-function(x){x}
inv.link<-link
}
if(FAMILY == "invgaussian"){
link<-function(x){-1/(2*x*x)}
inv.link<-function(x){ sqrt(-1/(2*x))}
}
}
beta1= 0.3
beta2= 0.5
betas_truth = c(beta1,beta2)
lambda = c(0.01,1,10)
GCVFLAG=T
GCVmethod='Exact'
scale.param = 1
covariates_flag = TRUE;
location_flag = FALSE; # TRUE NOT IMPLEMENTED YET
is_PDE = FALSE;
is_spacevarying = FALSE;
# mesh reading:
setwd(mesh_path)
data(sphere3Ddata)
sphere3D<-create.mesh.3D(sphere3Ddata$nodes, sphere3Ddata$tetrahedrons)
plot(sphere3D)
#.rs.restartR()
rm(list=ls())
graphics.off()
# PATH ------------------------------------------------
# gam_fem_path = "/home/alb/Scrivania/PACS/Codes_GAM_FEM/"
gam_fem_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/GAM_tests"
# gamfemfitfolder = "/home/alb/Scrivania/PACS/Git_Folder/"
gamfemfitfolder = "/Users/giuliopn/PACSworkspace4/"
# gamfemfitfolder = (DOVE VOGLIAMO SALVARE GLI AUTPUT DEI PRINT IN GAMFEMFIT)
mesh_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/fdaPDE_ultimate/data"
setwd(gam_fem_path)
library(fdaPDE)
FAMILY = "gaussian" # "cloglog", "probit", "poisson", "gamma", "exponential" , ( "gaussian", "inv_gaussian" )
.rs.restartR()
#.rs.restartR()
rm(list=ls())
#.rs.restartR()
rm(list=ls())
graphics.off()
.rs.restartR()
#.rs.restartR()
rm(list=ls())
graphics.off()
# PATH ------------------------------------------------
# gam_fem_path = "/home/alb/Scrivania/PACS/Codes_GAM_FEM/"
gam_fem_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/GAM_tests"
# gamfemfitfolder = "/home/alb/Scrivania/PACS/Git_Folder/"
gamfemfitfolder = "/Users/giuliopn/PACSworkspace4/"
# gamfemfitfolder = (DOVE VOGLIAMO SALVARE GLI AUTPUT DEI PRINT IN GAMFEMFIT)
mesh_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/fdaPDE_ultimate/data"
setwd(gam_fem_path)
library(fdaPDE)
FAMILY = "gaussian" # "cloglog", "probit", "poisson", "gamma", "exponential" , ( "gaussian", "inv_gaussian" )
{
if(FAMILY == "binomial"){
logit <- function(x){qlogis(x)}
inv.logit <- function(x){plogis(x)}
link = logit
inv.link = inv.logit
}
if(FAMILY == "cloglog"){
l<-make.link("cloglog")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "probit"){
l<-make.link("probit")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "poisson"){
l<-make.link("log")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "exponential"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gamma"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gaussian"){
link<-function(x){x}
inv.link<-link
}
if(FAMILY == "invgaussian"){
link<-function(x){-1/(2*x*x)}
inv.link<-function(x){ sqrt(-1/(2*x))}
}
}
beta1= 0.3
beta2= 0.5
betas_truth = c(beta1,beta2)
lambda = c(0.01,1,10)
GCVFLAG=T
GCVmethod='Exact'
scale.param = 1
covariates_flag = TRUE;
location_flag = FALSE; # TRUE NOT IMPLEMENTED YET
is_PDE = FALSE;
is_spacevarying = FALSE;
# mesh reading:
setwd(mesh_path)
data(sphere3Ddata)
sphere3D<-create.mesh.3D(sphere3Ddata$nodes, sphere3Ddata$tetrahedrons)
FEMbasis <- create.FEM.basis(sphere3D)
# locations -----------------------------------------------
set.seed(5847947)
# locations
if(location_flag){
nodesLocations=sphere3D$nodes
# Locations different from nodes
# Generate locations
nloc = 1000
loc=matrix(data=runif(3*nloc, min=-1,max=1),nrow=nloc,ncol=3,byrow=T)
ind=NULL
for(row in 1:nloc){
normvec = (loc[row,1]^2+loc[row,2]^2+loc[row,3]^2)
if(normvec>0.975)   # check points outside the sphere and remove them
ind = c(ind,row)
}
loc=loc[-ind,]
nloc=dim(loc)[1]
}else{
loc=sphere3D$nodes
nloc = dim(loc)[1]
}
# 3D random field (function f) ------------------------------
a1 = rnorm(1,mean = 1, sd = 1)
a2 = rnorm(1,mean = 1, sd = 1)
a3 = rnorm(1,mean = 1, sd = 1)
# Exact test function
sol_exact=numeric(nloc)
for (i in 0:(nloc-1)){
sol_exact[i+1] = a1* sin(2*pi*loc[i+1,1]) +  a2* sin(2*pi*loc[i+1,2]) +  a3*sin(2*pi*loc[i+1,3]) +1
}
ran=range(sol_exact)
# covariates ---------------------------------------------------------
set.seed(5847947)
if(covariates_flag){
desmat=matrix(0,nrow=nloc, ncol=2)
desmat[,1]= 4*sin(2*pi*loc[,1])+6*sin((2*pi*loc[,2])^2)
desmat[,2]= cos(-2*pi*loc[,3])
ran=range(desmat%*%betas_truth + sol_exact)
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
}else{
param = sol_exact
desmat = NULL
}
mu<-inv.link(param)
# sampling response:
{
if(FAMILY == "binomial" || FAMILY == "cloglog" || FAMILY == "probit"){
response <- rbernoulli(nloc,p = mu)
}
if(FAMILY == "gamma" ){
response <- rgamma(nloc, shape=mu/scale.param, scale=scale.param)
}
if(FAMILY == "exponential"){
response <- rgamma(nloc, alpha = 1, scale = mu)
}
if(FAMILY == "poisson"){
response <- rpois(nloc, lambda = mu)
}
if(FAMILY=="gaussian"){
response <- rnorm(nloc, mu, scale.param)
}
if(FAMILY == "invgaussian"){
response <- rinvgauss(length(loc[,1]), mu, lambda=scale.param)
}
}
# PDE parameters -----------
if(is_PDE){
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
}else{
PDE_parameters_anys = NULL
}
# Space Varying (forcing term) --------
if(is_spacevarying){
}else{
u_func = NULL
}
# location in nodes:
if(!location_flag){
loc = NULL
}
output_CPP <- smooth.GAM.FEM(location = loc, observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat, GCV=GCVFLAG, GCVmethod = GCVmethod,
lambda = lambda, max.steps=15, fam=FAMILY, mu0=NULL, scale.param=NULL)
betas_hat_CPP = output_CPP$beta_hat
fn_hat_CPP = output_CPP$fit.FEM$coeff
betas_hat_CPP
output_CPP.classic = smooth.FEM(observations = as.numeric(response), locations=loc, covariates=desmat,
FEMbasis = FEMbasis, lambda = lambda, GCV = GCVFLAG, GCVmethod = GCVmethod)
output_CPP.classic$beta
error_fn = fn_hat_CPP - output_CPP.classic$fit.FEM$coeff
error_fn
error_beta = betas_hat_CPP - output_CPP.classic$beta
error_beta
error_beta = abs(betas_hat_CPP - output_CPP.classic$beta)
error_beta
output_CPP.classic = smooth.FEM(observations = as.numeric(response), locations=loc, covariates=desmat,
FEMbasis = FEMbasis, lambda = lambda, GCV = GCVFLAG, GCVmethod = "Stochastic")
output_CPP <- smooth.GAM.FEM(location = loc, observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat, GCV=GCVFLAG, GCVmethod = "Stochastic",
lambda = lambda, max.steps=15, fam=FAMILY, mu0=NULL, scale.param=NULL)
betas_hat_CPP = output_CPP$beta_hat
betas_hat_CPP
.rs.restartR()
#.rs.restartR()
rm(list=ls())
graphics.off()
# PATH ------------------------------------------------
# gam_fem_path = "/home/alb/Scrivania/PACS/Codes_GAM_FEM/"
gam_fem_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/GAM_tests"
# gamfemfitfolder = "/home/alb/Scrivania/PACS/Git_Folder/"
gamfemfitfolder = "/Users/giuliopn/PACSworkspace4/"
# gamfemfitfolder = (DOVE VOGLIAMO SALVARE GLI AUTPUT DEI PRINT IN GAMFEMFIT)
mesh_path = "/Users/giuliopn/PACSworkspace4/PACS_fdaPDE/fdaPDE_ultimate/data"
setwd(gam_fem_path)
library(fdaPDE)
FAMILY = "gaussian" # "cloglog", "probit", "poisson", "gamma", "exponential" , ( "gaussian", "inv_gaussian" )
{
if(FAMILY == "binomial"){
logit <- function(x){qlogis(x)}
inv.logit <- function(x){plogis(x)}
link = logit
inv.link = inv.logit
}
if(FAMILY == "cloglog"){
l<-make.link("cloglog")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "probit"){
l<-make.link("probit")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "poisson"){
l<-make.link("log")
link<-l$linkfun
inv.link<-l$linkinv
}
if(FAMILY == "exponential"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gamma"){
link<-function(x){-1/x}
inv.link<-link
}
if(FAMILY == "gaussian"){
link<-function(x){x}
inv.link<-link
}
if(FAMILY == "invgaussian"){
link<-function(x){-1/(2*x*x)}
inv.link<-function(x){ sqrt(-1/(2*x))}
}
}
beta1= 0.3
beta2= 0.5
betas_truth = c(beta1,beta2)
lambda = c(0.01,1,10)
GCVFLAG=T
GCVmethod='Exact'
scale.param = 1
covariates_flag = TRUE;
location_flag = FALSE; # TRUE NOT IMPLEMENTED YET
is_PDE = FALSE;
is_spacevarying = FALSE;
# mesh reading:
setwd(mesh_path)
data(sphere3Ddata)
sphere3D<-create.mesh.3D(sphere3Ddata$nodes, sphere3Ddata$tetrahedrons)
plot(sphere3D)
FEMbasis <- create.FEM.basis(sphere3D)
# locations -----------------------------------------------
set.seed(5847947)
# locations
if(location_flag){
nodesLocations=sphere3D$nodes
# Locations different from nodes
# Generate locations
nloc = 1000
loc=matrix(data=runif(3*nloc, min=-1,max=1),nrow=nloc,ncol=3,byrow=T)
ind=NULL
for(row in 1:nloc){
normvec = (loc[row,1]^2+loc[row,2]^2+loc[row,3]^2)
if(normvec>0.975)   # check points outside the sphere and remove them
ind = c(ind,row)
}
loc=loc[-ind,]
nloc=dim(loc)[1]
}else{
loc=sphere3D$nodes
nloc = dim(loc)[1]
}
# 3D random field (function f) ------------------------------
a1 = rnorm(1,mean = 1, sd = 1)
a2 = rnorm(1,mean = 1, sd = 1)
a3 = rnorm(1,mean = 1, sd = 1)
# Exact test function
sol_exact=numeric(nloc)
for (i in 0:(nloc-1)){
sol_exact[i+1] = a1* sin(2*pi*loc[i+1,1]) +  a2* sin(2*pi*loc[i+1,2]) +  a3*sin(2*pi*loc[i+1,3]) +1
}
ran=range(sol_exact)
# covariates ---------------------------------------------------------
set.seed(5847947)
if(covariates_flag){
desmat=matrix(0,nrow=nloc, ncol=2)
desmat[,1]= 4*sin(2*pi*loc[,1])+6*sin((2*pi*loc[,2])^2)
desmat[,2]= cos(-2*pi*loc[,3])
ran=range(desmat%*%betas_truth + sol_exact)
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
}else{
param = sol_exact
desmat = NULL
}
mu<-inv.link(param)
# sampling response:
{
if(FAMILY == "binomial" || FAMILY == "cloglog" || FAMILY == "probit"){
response <- rbernoulli(nloc,p = mu)
}
if(FAMILY == "gamma" ){
response <- rgamma(nloc, shape=mu/scale.param, scale=scale.param)
}
if(FAMILY == "exponential"){
response <- rgamma(nloc, alpha = 1, scale = mu)
}
if(FAMILY == "poisson"){
response <- rpois(nloc, lambda = mu)
}
if(FAMILY=="gaussian"){
response <- rnorm(nloc, mu, scale.param)
}
if(FAMILY == "invgaussian"){
response <- rinvgauss(length(loc[,1]), mu, lambda=scale.param)
}
}
# PDE parameters -----------
if(is_PDE){
PDE_parameters_anys = list(K = matrix(c(0.01,0,0,1), nrow = 2), b = c(0,0), c = 0)
}else{
PDE_parameters_anys = NULL
}
# Space Varying (forcing term) --------
if(is_spacevarying){
}else{
u_func = NULL
}
# location in nodes:
if(!location_flag){
loc = NULL
}
output_CPP <- smooth.GAM.FEM(location = loc, observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat, GCV=GCVFLAG, GCVmethod = GCVmethod,
lambda = lambda, max.steps=15, fam=FAMILY, mu0=NULL, scale.param=NULL)
betas_hat_CPP = output_CPP$beta_hat
betas_hat_CPP
