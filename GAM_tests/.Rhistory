library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
rm(list=ls())
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
.rs.restartR()
rm(list=ls())
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
rm(list=ls())
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
image(FEM(output_CPP$fit.FEM$coeff[,which.min(output_CPP$GCV)],FEMbasis))
.rs.restartR()
rm(list=ls())
.rs.restartR()
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
rm(list=ls())
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
rm(list=ls())
.rs.restartR()
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
# setwd("/home/alb/Scrivania/PACS/Git_Folder/PACSworkspace/fdaPDE_ultimate/data")
data(square2Ddata)
mesh=create.mesh.2D(nodes=nodes)
# x11()
plot(mesh)
nnodes=dim(mesh$nodes)[1]
FEMbasis=create.FEM.basis(mesh)
set.seed(5847947)
a1=runif(1,min=-1.5,max=1.5)
a2=runif(1,min=-1.5,max=1.5)
z<-function(p)
{
a1*sin(2*pi*p[1])*cos(2*pi*p[2])+a2*sin(3*pi*p[1])
}
# Exact solution (pointwise at nodes)
sol_exact=rep(0,dim(mesh$nodes)[1])
for(i in 1: dim(mesh$nodes)[1])
sol_exact[i]=z(mesh$nodes[i,])
ran=range(sol_exact)
lambda= seq(10^-6,10^-3,by=5*10^-6)
GCVFLAG=T
GCVMETHODFLAG='Exact'
link<-function(x){logit(x)}
inv.link<-function(x){1/(1+exp(-x))}
desmat=matrix(0,nrow=nnodes,ncol=2)
desmat[,1]=rbeta(nnodes,shape1=1.5,shape2=2)  # sampling covariates from beta distr.
desmat[,2]=rbeta(nnodes,shape1=3,shape2=2)+1  # sampling covariates from beta distr.
beta1=-2/5
beta2=3/10
param=sol_exact+beta1*desmat[,1]+beta2*desmat[,2]
mu<-inv.link(param)
response <- rbernoulli(nnodes,p = mu)
output_CPP <- gam.fem.fit(observations = as.numeric(response), FEMbasis =FEMbasis, covariates = desmat,
lambda = 10^-5, max.steps=15, fam='binomial', mesh.const=T, scale.param=NULL)
image(FEM(output_CPP$fit.FEM$coeff[,which.min(output_CPP$GCV)],FEMbasis))
.rs.restartR()
library(fdaPDE)
library(purrr)
rm(list=ls())
graphics.off()
rm(list=ls())
.rs.restartR()
rm(list=ls())
